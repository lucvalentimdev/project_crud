unit U_GeralController;

interface
   uses
   U_Pessoa, U_Endereco;

type
  TGeralController = class

  private
    FPessoa: TPessoa;

  public
    constructor Create(APessoa: TPessoa);


    procedure SalvarPessoa(const TipoPessoa: Integer; const Nome: string; const DataNascimento: TDate;
                           const CPF: string; const RG: string; const Email: string; const Telefone: string;
                           const Endereco: TEndereco);
    procedure ConsultarCEP(const ACep: string; var AEndereco: TEndereco);
    function ValidarCEP(const ACep: string): Boolean;

  end;

implementation

uses
  System.SysUtils;

constructor TGeralController.Create(APessoa: TPessoa);
begin
  FPessoa := APessoa;
end;

procedure TGeralController.SalvarPessoa(const TipoPessoa: Integer; const Nome: string; const DataNascimento: TDate;
          const CPF: string; const RG: string; const Email: string; const Telefone: string;const Endereco: TEndereco);
begin
  FPessoa.TipoPessoa       := TipoPessoa;                 // Atualiza os dados da pessoa no model  //
  FPessoa.Nome             := Nome;
  FPessoa.DataNascimento   := DataNascimento;
  FPessoa.CPF              := CPF;
  FPessoa.RG               := RG;
  FPessoa.Email            := Email;
  FPessoa.Telefone         := Telefone;
  FPessoa.Endereco         := Endereco;

  FPessoa.Salvar;                                     // Chamada do metodo salvar no modelo Pessoa //
end;

function TGeralController.ValidarCEP(const ACep: string): Boolean;
var
  Endereco: TEndereco;
begin
  Endereco := TEndereco.Create;
  try
    Result := Endereco.ValidarCEP(ACep); // Método do TEndereco para validar o CEP //
  finally
    Endereco.Free;                        // Libera da memoria //
  end;

end;

procedure TGeralController.ConsultarCEP(const ACep: string; var AEndereco: TEndereco);
begin
  try
    AEndereco.ConsultarViaCEP(ACep);
  except on E: Exception do
      raise Exception.Create('Erro ao consultar o CEP: ' + E.Message);
  end;
end;

end.
