unit U_FPessoaCadastrar;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.WinXCalendars, Vcl.StdCtrls, Vcl.Buttons, Vcl.Imaging.pngimage, Vcl.Mask;

type
  TF_PessoaCadastrar = class(TForm)
    grp_Profile: TGroupBox;
    Label7: TLabel;
    img_Perfil: TImage;
    Label10: TLabel;
    Lb_DataCadastro: TLabel;
    Lb_2: TLabel;
    Label14: TLabel;
    Bbtn_UpImgPerfil: TBitBtn;
    grp_Dados: TGroupBox;
    Label24: TLabel;
    Label2: TLabel;
    Label5: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Lb_DataNascFund: TLabel;
    Label26: TLabel;
    Label37: TLabel;
    Ed_Nome: TEdit;
    Cbo_TipoPessoa: TComboBox;
    Ed_CPF: TEdit;
    Ed_Email: TEdit;
    Calendar_DataNasc: TCalendarPicker;
    Ed_Logradouro: TEdit;
    Pn_rodape: TPanel;
    Bbtn_Limpar: TBitBtn;
    Bbtn_Fechar1: TBitBtn;
    Bbtn_Concluir: TBitBtn;
    OpenDialog1: TOpenDialog;
    Label1: TLabel;
    Ed_CNPJ: TEdit;
    Label3: TLabel;
    Ed_Telefone: TEdit;
    Ed_Cidade: TEdit;
    Label4: TLabel;
    Label6: TLabel;
    Bbtn_Novo: TBitBtn;
    Bbtn_Buscar: TBitBtn;
    Bbtn_Cancelar: TBitBtn;
    Ed_UF: TEdit;
    Ed_CEP: TMaskEdit;
    procedure Bbtn_UpImgPerfilClick(Sender: TObject);
    procedure Cbo_TipoPessoaSelect(Sender: TObject);
    procedure Bbtn_Fechar1Click(Sender: TObject);
    procedure Bbtn_NovoClick(Sender: TObject);
    procedure Bbtn_BuscarClick(Sender: TObject);
    procedure Ed_CEPExit(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  F_PessoaCadastrar: TF_PessoaCadastrar;

implementation

uses
   U_Endereco, U_Pessoa, U_FPessoaBuscar;

{$R *.dfm}

procedure TF_PessoaCadastrar.Bbtn_BuscarClick(Sender: TObject);
begin
   if F_PessoaBuscar = nil then
   begin
      try
         F_PessoaBuscar    := TF_PessoaBuscar.Create(Self);
         F_PessoaBuscar.ShowModal;
      finally
         F_PessoaBuscar    := nil;
      end;
   end
   else
      F_PessoaBuscar.ShowModal;

end;

procedure TF_PessoaCadastrar.Bbtn_Fechar1Click(Sender: TObject);
begin
   Close;
end;

procedure TF_PessoaCadastrar.Bbtn_NovoClick(Sender: TObject);
begin
   Bbtn_Concluir.Visible   := True;
   Bbtn_Novo.Enabled       := False;
   Bbtn_Cancelar.Enabled   := False;
end;

procedure TF_PessoaCadastrar.Bbtn_UpImgPerfilClick(Sender: TObject);
 var
  EnderecoImg : string;
begin
   if OpenDialog1.Execute then
      EnderecoImg  := OpenDialog1.FileName;

   Img_Perfil.Picture.LoadFromFile(EnderecoImg);   // Carrega temporariamente a imagem no TImagem //
end;

procedure TF_PessoaCadastrar.Cbo_TipoPessoaSelect(Sender: TObject);
begin
   if (Cbo_TipoPessoa.Text = 'FORNECEDOR') OR (Cbo_TipoPessoa.Text = 'TRANSPORTADOR') then
   begin
      Ed_CNPJ.Enabled         := True;
      Ed_CNPJ.Color           := clInfoBk;
      Lb_DataNascFund.Caption := 'Data Fundação:'
   end;
end;

procedure TF_PessoaCadastrar.Ed_CEPExit(Sender: TObject);
var
   CEP : TEndereco;
begin
   try
      try
         CEP := TEndereco.Create;

         if CEP.ValidarCEP(Trim(Ed_CEP.Text)) then       // Valida se o CEP esta dento do padrão //
         begin
            MessageDlg('CEP inválido, favor verificar!', mtInformation, [mbOk, mbCancel], 0);
            Exit;
         end;

         CEP.ConsultarViaCEP(Trim(Ed_CEP.Text));
      except
         raise Exception.Create(CEP.Log);
      end;
   finally
      CEP := nil;
   end;

   Ed_Logradouro.Text   := CEP.Logradouro;
   Ed_Cidade.Text       := CEP.Cidade;
   Ed_UF.Text           := CEP.Estado;
end;

end.
